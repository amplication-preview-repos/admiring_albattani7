/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Interviewer as PrismaInterviewer } from "@prisma/client";
import { CompareCVsInput } from "../CompareCVsInput";

export class InterviewerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InterviewerCountArgs, "select">
  ): Promise<number> {
    return this.prisma.interviewer.count(args);
  }

  async interviewers(
    args: Prisma.InterviewerFindManyArgs
  ): Promise<PrismaInterviewer[]> {
    return this.prisma.interviewer.findMany(args);
  }
  async interviewer(
    args: Prisma.InterviewerFindUniqueArgs
  ): Promise<PrismaInterviewer | null> {
    return this.prisma.interviewer.findUnique(args);
  }
  async createInterviewer(
    args: Prisma.InterviewerCreateArgs
  ): Promise<PrismaInterviewer> {
    return this.prisma.interviewer.create(args);
  }
  async updateInterviewer(
    args: Prisma.InterviewerUpdateArgs
  ): Promise<PrismaInterviewer> {
    return this.prisma.interviewer.update(args);
  }
  async deleteInterviewer(
    args: Prisma.InterviewerDeleteArgs
  ): Promise<PrismaInterviewer> {
    return this.prisma.interviewer.delete(args);
  }
  async CompareCVs(args: CompareCVsInput): Promise<string> {
    throw new Error("Not implemented");
  }
}
