/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InterviewerService } from "../interviewer.service";
import { InterviewerCreateInput } from "./InterviewerCreateInput";
import { Interviewer } from "./Interviewer";
import { InterviewerFindManyArgs } from "./InterviewerFindManyArgs";
import { InterviewerWhereUniqueInput } from "./InterviewerWhereUniqueInput";
import { InterviewerUpdateInput } from "./InterviewerUpdateInput";
import { CompareCVsInput } from "../CompareCVsInput";

export class InterviewerControllerBase {
  constructor(protected readonly service: InterviewerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Interviewer })
  async createInterviewer(
    @common.Body() data: InterviewerCreateInput
  ): Promise<Interviewer> {
    return await this.service.createInterviewer({
      data: data,
      select: {
        createdAt: true,
        department: true,
        email: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Interviewer] })
  @ApiNestedQuery(InterviewerFindManyArgs)
  async interviewers(@common.Req() request: Request): Promise<Interviewer[]> {
    const args = plainToClass(InterviewerFindManyArgs, request.query);
    return this.service.interviewers({
      ...args,
      select: {
        createdAt: true,
        department: true,
        email: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Interviewer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async interviewer(
    @common.Param() params: InterviewerWhereUniqueInput
  ): Promise<Interviewer | null> {
    const result = await this.service.interviewer({
      where: params,
      select: {
        createdAt: true,
        department: true,
        email: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Interviewer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInterviewer(
    @common.Param() params: InterviewerWhereUniqueInput,
    @common.Body() data: InterviewerUpdateInput
  ): Promise<Interviewer | null> {
    try {
      return await this.service.updateInterviewer({
        where: params,
        data: data,
        select: {
          createdAt: true,
          department: true,
          email: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Interviewer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInterviewer(
    @common.Param() params: InterviewerWhereUniqueInput
  ): Promise<Interviewer | null> {
    try {
      return await this.service.deleteInterviewer({
        where: params,
        select: {
          createdAt: true,
          department: true,
          email: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/compare-cvs")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CompareCVs(
    @common.Body()
    body: CompareCVsInput
  ): Promise<string> {
    return this.service.CompareCVs(body);
  }
}
