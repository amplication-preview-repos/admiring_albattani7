/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Interviewer } from "./Interviewer";
import { InterviewerCountArgs } from "./InterviewerCountArgs";
import { InterviewerFindManyArgs } from "./InterviewerFindManyArgs";
import { InterviewerFindUniqueArgs } from "./InterviewerFindUniqueArgs";
import { CreateInterviewerArgs } from "./CreateInterviewerArgs";
import { UpdateInterviewerArgs } from "./UpdateInterviewerArgs";
import { DeleteInterviewerArgs } from "./DeleteInterviewerArgs";
import { CompareCVsInput } from "../CompareCVsInput";
import { InterviewerService } from "../interviewer.service";
@graphql.Resolver(() => Interviewer)
export class InterviewerResolverBase {
  constructor(protected readonly service: InterviewerService) {}

  async _interviewersMeta(
    @graphql.Args() args: InterviewerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Interviewer])
  async interviewers(
    @graphql.Args() args: InterviewerFindManyArgs
  ): Promise<Interviewer[]> {
    return this.service.interviewers(args);
  }

  @graphql.Query(() => Interviewer, { nullable: true })
  async interviewer(
    @graphql.Args() args: InterviewerFindUniqueArgs
  ): Promise<Interviewer | null> {
    const result = await this.service.interviewer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Interviewer)
  async createInterviewer(
    @graphql.Args() args: CreateInterviewerArgs
  ): Promise<Interviewer> {
    return await this.service.createInterviewer({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Interviewer)
  async updateInterviewer(
    @graphql.Args() args: UpdateInterviewerArgs
  ): Promise<Interviewer | null> {
    try {
      return await this.service.updateInterviewer({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Interviewer)
  async deleteInterviewer(
    @graphql.Args() args: DeleteInterviewerArgs
  ): Promise<Interviewer | null> {
    try {
      return await this.service.deleteInterviewer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => String)
  async CompareCVs(
    @graphql.Args()
    args: CompareCVsInput
  ): Promise<string> {
    return this.service.CompareCVs(args);
  }
}
